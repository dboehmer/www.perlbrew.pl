<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>perlbrew</title>
  <link rel="alternate" href="http://perlbrew.pl" type="text/html"/>
  <link rel="self" href="http://perlbrew.pl/atom.xml" type="application/atom+xml"/>
  <updated>2012-08-24T05:12:58Z</updated>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.48.html" type="text/html"/>
    <title>Perlbrew Release 0.48</title>
    <updated>2012-08-24T07:12:00+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.48 is released on August 24 2012 with these changes</p>

<ul>
<li>The build log output "build.log" is now named after the installation name for eaiser reference.</li>
<li>Fix the invokation configure command to actually contains -Duserelocatableinc</li>
<li>Experimental: bash/zsh users may put this to shell init instead: eval "$(~/perl5/perlbrew/bin/perlbrew init -)"</li>
<li>A few output message updates</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.47.html" type="text/html"/>
    <title>Perlbrew Release 0.47</title>
    <updated>2012-08-23T09:43:03+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.47 is released on August 23 2012, it contains these changes</p>

<ul>
<li>New command: download.</li>
<li>New env var: PERLBREW_CONFIGURE_FLAGS</li>
<li>userelocatableinc is enabled by default when the installing perl version is greater than or equals to 5.8.9. It should make some use cases eaiser. In particular, you can move PERLBREW_ROOT directory to another place.</li>
<li>fix https://github.com/gugod/App-perlbrew/issues/216 for bash users and zsh users</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.46.html" type="text/html"/>
    <title>Perlbrew Release 0.46</title>
    <updated>2012-07-21T08:16:40+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.46 contain these changes</p>

<ul>
<li>fix: The deprecation warning when running <code>self-upgrde</code></li>
<li>fix: system MANPATH detection </li>
<li>improvement: Specifying multiple perl: <code>exec --with perl-5.14.2,perl-5.16.0</code>
<ul>
<li>Read more details by running <code>perlbrew help exec</code></li>
</ul></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.45.html" type="text/html"/>
    <title>Perlbrew Release 0.45</title>
    <updated>2012-07-14T19:03:55+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.45 contain these changes</p>

<ul>
<li>New command: install-ack . This install the standalone version of ack under $PERLBREW_ROOT/bin</li>
<li>New command: list-modules</li>
<li><code>exec</code> command now also iterates thourgh all the libs</li>
<li>Documented the <code>--with</code> argument of exec command. See <code>perlbrew help exec</code></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Dealing-with-shebangs.html" type="text/html"/>
    <title>Dealing with shebangs</title>
    <updated>2012-07-04T21:46:14+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>In the POD of perlrun, we can find two possible perl program preambles that tries to use the environment-decided perl installation, one is very cryptic: </p>

<pre><code>#!/bin/sh
#! −*−perl−*−
eval 'exec perl −x −wS $0 ${1+"$@"}'
    if 0;
</code></pre>

<p>The other is extremely simple:</p>

<pre><code>#!/usr/bin/env perl
</code></pre>

<p>Bascially they are both telling the OS (that understands the shebang) to find the first "perl" executable in the list of $PATH, and <code>exec</code> that program by appending the current file name after the shebang. The first snippets runs <code>/bin/sh</code>, the second runs <code>/usr/bin/env</code>. Neither of them invokes "perl" directly, like this shebang youl'll find in most perl programs:</p>

<pre><code>#!/usr/bin/perl
</code></pre>

<p>This is because most UNIX-like systems (especially Linux) comes with perl installed at <code>/usr/bin/perl</code>. Some UNIX does not have perl by default, but can be easily installed latter on. Just that they might end up being at <code>/usr/local/bin/perl</code>. Usually perl programmers call them "system perl".</p>

<p>A developer might install their own version of perl to anywhere like <code>/opt/perl5.14.2/bin/perl</code> or <code>/opt/local/bin/perl</code> or any other fancy paths. An put the bin path to the beginning of <code>$PATH</code> environment variable so that when they run perl programs as <code>perl foo.pl</code>, it'll invoke their own version of perl, not the system perl. There is no special names for such perl installation, let's call them as "env perl" in the article.</p>

<p>perlbrew rely on this mechanism to be functional properly. Whenever you say <code>perlbrew use 5.14.2</code>, perlbrew locates the path of 5.14.2 perl binary, and modify <code>$PATH</code> to point to there. Running perl programs with env perl requires you type "perl" in the beginning of the command. Relying shebang lines in the code does not.</p>

<p>The shebang schema is like Dokodemo Door, a convention that brings huge convenience to easily specify an compiler + runner of the code. Without this design, scripting/dynamic language authors might just create their own conventions.</p>

<p>However, it also creates problems. A cross-platform perl program might not be set be executable because the shebang line is valid on the author's platform, but not on the users' environment. A perl program authored on Mac can simply put <code>#!/usr/bin/perl</code> in the first line, but once that program gets copied to FreeBSD, perl can only be found at <code>#!/usr/local/bin/perl</code>. The user intend to run the program should modify the code a little bit in order to make it a valid executable. Which really invalids the statement that "perl programs are cross-platform."</p>

<p>Well, that sounds like picking bones from a egg. Developers will eventually learn that they can either symlink perl around, or have some fancy scripts that properly modify shebang in-place. True. However when a program does not run because of a invalid shebang line, it can be really frustrated for newbies</p>

<p>Sadly, there is really no perfect cross-platform shebang that works for all UNIX-like systems.</p>

<p>However, CPAN distributions built with <code>ExtUtil::MakeMaker</code> solves this issue in a very good way. When perl programs are distributed / installed as a CPAN distribution, its shebang line are rewritten to be the same perl that used to invoke cpan client itself. Or, if you download+extract a CPAN distribution on your own and run <code>perl Makefile.PL</code> to do manual installation, it will be you env perl.</p>

<p>Since shebang is hard to be cross-platfrom, it is also not trivial to decide what to put on the perlbrew executable shebang. You'll find that it currently contains <code>#!/usr/bin/perl</code>. However, the true is, when users runs this installer:</p>

<pre><code>curl -kL http://install.perlbrew.pl | bash
</code></pre>

<p>The downloaded perlbrew will be modified to use your system perl shebang. To be more specific, it is the pre-perlbrew env perl shebang. That means <code>the first perl in $PATH that is not under $PERLRREW_ROOT</code>.</p>

<p>You might remember that it used to be just <code>#!/usr/bin/env perl</code>. But that has at least 2 drawbacks:</p>

<ol>
<li>CentOS Linux comes without <code>/usr/bin/env</code>, but only <code>/bin/env</code> (well, the same for many other UNIXs)</li>
<li><code>perlbrew use perl-5.6.0</code> will strangle perlbrew executable itself, because perlbrew requires 5.8.8.</li>
</ol>

<p>Therefore, it is the best to let <code>perlbrew</code> itself fixed to use system perl shebang. You may leave your own program to use the env shebang so that it can be invoked with env perl, which is managed with perlbrew. Optionally, you might want to hard-coded a perlbrew perl shebang in your code for some use cases.</p>

<p>Shebang is cool. It even feels like a cool word to be spoken. But having to manage shebang in programs really sucks. <em>shrug</em></p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.44.html" type="text/html"/>
    <title>Perlbrew Release 0.44</title>
    <updated>2012-07-04T21:43:45+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.44 contain these changes</p>

<ul>
<li>Notice: "self-install" command now alters the shebang to use system perl</li>
<li>Notice: "install-patchperl" command now alters the shebang to use system perl.</li>
<li>some documentation tweaks</li>
<li>fix: <code>perlbrew use</code> to/from a lib has not been working properly.</li>
</ul>

<p>Also tl;dr <a href="Dealing-with-shebangs.html">Dealing with shebangs</a></p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Home.html" type="text/html"/>
    <title>Welcome to the App-perlbrew wiki!</title>
    <updated>2012-07-04T21:41:29+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The content in the wiki will be semi-manually built as HTML and get published to http://perlbrew.pl . You are welcome to write up a page and ping me (@gugod) to get it published.</p>

<h2>How To Information</h2>

<ul>
<li><a href="Dealing-with-shebangs.html">Dealing with shebangs</a></li>
<li><a href="Reinstall-All-Modules-On-New-Perl.html">Reinstall-All-Modules-On-New-Perl</a></li>
<li><a href="Perlbrew-中文簡介.html">Perlbrew 中文簡介</a></li>
<li><a href="Install-a-sitecustomize.pl-file-with-Perlbrew.html">Install a sitecustomize.pl file with Perlbrew</a></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.43.html" type="text/html"/>
    <title>Perlbrew Release 0.43</title>
    <updated>2012-05-27T14:34:55+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.43 contain these changes</p>

<ul>
<li>cpantester-error fixes</li>
<li>csh support. Big thanks to matzsoft.</li>
<li>support 'fetch' command on FreeBSD.</li>
<li>Fix a bug that perlbrew failed to resolve version number when dist path contain "perl5"</li>
</ul>

<p>The csh support is a wonderful piece of work by <a href="https://github.com/matzsoft">matzsoft</a>,
that means csh users can also quickly <code>use</code> different perl versions in the shell, without
resorting a sub-shell. Big appreciate to mazsoft <code>:-)</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.42.html" type="text/html"/>
    <title>Perlbrew Release 0.42</title>
    <updated>2012-03-07T12:22:01+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.42 contain these minor changes</p>

<ul>
<li>Improvement: die when running perlbrew (use|switch) with unknown installation name.</li>
<li>clean 'build.log' on install. ref: RT #69168.</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.41.html" type="text/html"/>
    <title>Perlbrew Release 0.41</title>
    <updated>2012-02-02T04:22:12+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.41 contain minor fixes:</p>

<ul>
<li>Fix installation issue when the specified version is not listed in CPAN::Perl::Releases</li>
<li>Fix sub-shell invocation for 'switch' and 'use' command. This is particularly for csh users, but it should also work for bash users.</li>
</ul>

<p>The sub-shell is a fallback when user does not sourcing the perlbrew bashrc in
their <code>~/.bash_profile</code> or <code>~/.zshenv</code>. However it is advertised to avoid using
sub-shell, but just include bash/zsh integration for much better experience.</p>

<p>Also notice that, on Mac OSX Lion, zsh sub-shell is not working at all due to
the content of <code>/etc/zshenv</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.40.html" type="text/html"/>
    <title>Perlbrew Release 0.40</title>
    <updated>2012-01-23T01:49:32+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.40 is the release greeting the Happy Chinese New Year of Dragon.</p>

<ul>
<li>Make the stanalone perlbrew program smaller by using Perl::Strip</li>
<li>use CPAN::Perl::Releases to decide the location of perl tarball -- less HTTP hits</li>
<li>Prefer $PERLBREW_ROOT/bin/patchperl if it is there.</li>
</ul>

<p>May the Dragon brings you the best luck.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.39.html" type="text/html"/>
    <title>Perlbrew Release 0.39</title>
    <updated>2011-12-31T17:10:59+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.39 is the Happy New Year 2012 (TZ=CST) release with 3 bug fixes. All
bash users are recommended to this version, especially if you're using it with
local::lib integration.</p>

<ul>
<li>Fix GH #179. lib naming are more consistent.</li>
<li>Fix GH #171. bash users are suggestted to upgrad to this version.</li>
<li>Fix GH #152.</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.38.html" type="text/html"/>
    <title>Perlbrew Release 0.38</title>
    <updated>2011-12-29T03:13:54+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.38 only fixes dependency declariton for 0.37. See <a href="Release-0.37.html">Release 0.37</a> release note
for the latest feature updates.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.37.html" type="text/html"/>
    <title>Perlbrew Release 0.37</title>
    <updated>2011-12-28T10:40:15+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.37 features these changes</p>

<ul>
<li>fix ENV mess after switching to diffirent libs multiple times</li>
<li>add --sitecustomize option. For more detail, read: <a href="Install-a-sitecustomize.pl-file-with-Perlbrew.html">Install a sitecustomize.pl file with Perlbrew</a></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Install-a-sitecustomize.pl-file-with-perlbrew.html" type="text/html"/>
    <title>Install a sitecustomize.pl file with perlbrew</title>
    <updated>2011-12-28T09:46:42+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>When perl is compiled with <code>-Dusesitecustomize</code> it will look for a file in the <code>$Config{siteperl}</code> directory called <code>sitecustomize.pl</code> and execute it extremely early in the life of the interpreter.  (See <a href="http://perldoc.perl.org/perlrun.html">perldoc perlrun</a> and the <code>-f</code> switch for an explanation.)</p>

<p>Perlbrew 0.37 adds the <code>--sitecustomize</code> installation option to specify a Perl file to be installed as <code>sitecustomize.pl</code>. (Perlbrew will also set <code>-Dusesitecustomize</code> automatically.)</p>

<pre><code>$ perlbrew install perl-5.14.2 --sitecustomize /path/to/customize.pl
</code></pre>

<p>This is extremely useful for doing dynamic manipulation of the environment or perl globals.  In particular, it can be used to modify @INC in a more customized way than can be achieved with <code>PERL5LIB</code>.</p>

<p>Consider this usage example: A user wants to be able to install a command line perl application like App::Ack and have it be available regardless of which perl is active with Perlbrew.  Further, the user would like to keep its dependencies isolated so that the Perlbrew-installed perl stays 'pure'.</p>

<p>A good way to install an isolated application is to use <code>local::lib</code> with Perlbrew:</p>

<pre><code>$ perlbrew lib create ack
$ perlbrew use perl-5.14.2@ack
$ cpanm App::Ack
</code></pre>

<p>This installs the 'ack' program to the <code>bin</code> directory of the configured local library directory.  If the user switches to another Perl or another local library directory, <code>ack</code> won't be available.  The user can't run <code>ack</code> directly out of the local library <code>bin</code> directory because <code>PERL5LIB</code> won't be set correctly to find its dependencies.</p>

<p>There are many ways to solve this problem.  One approach is to use a <code>sitecustomize.pl</code> file.  The following <code>sitecustomize.pl</code> file checks to see if the executing script appears to be installed in a
local library that follows the <code>INSTALL_BASE</code> convention.  If so, it <strong>automatically</strong> adds the proper library path to <code>@INC</code>:</p>

<pre><code>use strict;
use Config;
use Cwd ();
my %seen;
my @bindirs =
  grep { defined &amp;&amp; !$seen{$_}++ } 
  map { $Config{"install". $_} }
  map { ("${_}bin", "${_}script") } "", "site", "vendor";

my $script = Cwd::realpath($0);

if ( ! grep { /\Q$script\E/ } @bindirs ) {
  my @path = split "/", $script;
  if ( @path &gt; 2 ) { # at least /bin/foo
    pop @path; # get rid of script filename
    my $installbase = join("/", @path[0 .. $#path-1], 'lib', 'perl5');
    if ( $path[-1] eq 'bin' &amp;&amp; -d $installbase ) {
      require lib;
      lib-&gt;import($installbase);
    }
  }
}
</code></pre>

<p>That lets the user switch Perlbrew perls but still run the original <code>ack</code> program via an alias.</p>

<pre><code>$ alias ack=`which ack`
$ perlbrew use perl-5.10.2
$ ack PATTERN
</code></pre>

<p>The <code>ack</code> that is run via the alias has a shebang line (<code>#!...</code>) that invoke the original perl, which will run <code>sitecustomize.pl</code>, which will fix up <code>@INC</code> and then <code>ack</code> will run successfully, finding its dependencies in <code>@INC</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.36.html" type="text/html"/>
    <title>Perlbrew Release 0.36</title>
    <updated>2011-12-17T19:54:56+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.36 is just to make it installable with <code>cpan</code>, there are no feature changes:</p>

<ul>
<li>fix test errors on freebsd that makes it uninstallable</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.35.html" type="text/html"/>
    <title>Perlbrew Release 0.35</title>
    <updated>2011-12-17T06:08:35+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.35 is a maintenance release with these fixes:</p>

<ul>
<li>fixes for cpantester failures</li>
<li>requiers local::lib version 1.008</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.34.html" type="text/html"/>
    <title>Perlbrew Release 0.34</title>
    <updated>2011-12-15T23:54:25+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.34 is a maintenance release with some fixes, and some new stuffs.</p>

<ul>
<li>Awesome URLs:
<ul>
<li>The installer: http://install.perlberw.pl</li>
<li>The program: http://get.perlberw.pl</li>
</ul></li>
<li>Fix: remove duplicated items from the output of <code>perlbrew list</code>.</li>
<li>New Command: self-install.
<ul>
<li>This is actually renamed from an undocumented command <code>install-perlbrew</code></li>
<li>Plus it gets documented.</li>
</ul></li>
<li>Provide aditional bash completion control helper commands.</li>
<li>Documentation fixes / typo corrections.</li>
<li>alter MANPATHs, see GH #173</li>
<li>Allow the representation like '@lib' te mean "a lib name under current perl.". See GH #153</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-ä¸­æç°¡ä».html" type="text/html"/>
    <title>Perlbrew</title>
    <updated>2011-11-29T14:18:49+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>本篇文章同步刊載於中研院自由軟體鑄造場 <a href="http://www.openfoundry.org/tw/tech-column/8514-perlbrew-perl-installation-management-tool">http://www.openfoundry.org/tw/tech-column/8514-perlbrew-perl-installation-management-tool</a>.</p>

<ul>
<li>林佑安 (c9s) <a href="mailto:cornelius.howl@gmail.com">cornelius.howl@gmail.com</a></li>
</ul>

<h2>緣起</h2>

<p>Perl5 的開發，以往有個習俗，也就是每一次的版本釋出，都由一位 Pumpking (patch pumpkin) 來主導，這位 Pumpking 得處理 patch，處理新功能，更新核心模組，處理 Regression, Build 以及一般的修正，處理二進位檔的相容性等等的工作。</p>

<p>也就是說，在以往，作為一位 Pumpking ，你必須是一位硬底子的 C 語言黑客，相當熱愛 Perl，且必須要有責任感，然後得同時為專案管理經理，要處理新版本釋出，得相當了解編譯器，能處理 Patch，也要能夠設計程式語言。</p>

<p>這些工作相當的難，而且也相當花時間。</p>

<p>舉例來說，Perl 5.8.8 至 Perl 5.10.0 的釋出，就花了 5 年的時間，且燒光了兩位相當厲害的黑客的氣力，其中包含 Hugo van der sanden(hvds) 以及 Rafael Garcia Suarez (rgs)，他們分別在 2004 年以及 2009 年退出了這項工作。</p>

<p>處理 perl5.10.1 釋出的 Dave Mitchell 也說 「這些事情實在*<em>相當的</em>*難」，最後 Dave Mitchell 也在 2009 年十月時退出了這份工作。</p>

<p>所以 Perl 團隊改善了版本釋出流程，將各種不同工作委派給專職的人員，讓 Pumpking 專心在版本釋出的工作上。</p>

<p>以往從 2007 年開始，Perl 5.9.0, 5.9.1, 5.9.2 一直到 5.9.5，每個版本之間的釋出都至少花了一年的時間，而流程改善之後， 5.11.0, 5.11.1, 5.11.2 一直到 5.13 ，每個版本只花了一個月的時間釋出。 一直到現在，Perl 釋出的版本已經到 5.15.3 。</p>

<p>Jesse Vincent 說，處理 5.11.0 釋出只花了他四天時間，5.11.1 只花了他兩天的時間，而現在處理每個新版的釋出，甚至不用到一天。</p>

<p>除了釋出變快了，每次釋出能夠納入的修正、新設計也變多了。</p>

<p>也因此，為了能夠使用最新的、不同版本的 Perl，新的需求產生出來了，而滿足這個需求的解決方案就是 Perlbrew。</p>

<h2>簡介</h2>

<p>2010 年二月，CPAN 模組開發者，劉康民 (gugod) 釋出了 App::perlbrew 模組，該模組是以 Ruby 的 RVM 概念出發，也就是使用者可以使用 Perlbrew 將不同版本的 Perl 安裝在 $HOME 路徑內，並且使用 Perlbrew 來切換不同版本的 Perl 使用。</p>

<p>使用 Perlbrew 有幾個優點:</p>

<ul>
<li>不需要使用 sudo 來安裝 CPAN 模組</li>
<li>可以使用每個月不斷釋出的新的 Perl</li>
<li>可嘗試新的程式語言功能</li>
<li>可以不再被 Vendor Perl 限制 (平台內建的 Perl)</li>
<li>可在不同版本的 Perl 下測試模組</li>
<li>可整合至 bash, zsh, csh 環境變數</li>
</ul>

<h2>安裝</h2>

<p>將下面這行 Shell 指令貼入您的終端機內執行:</p>

<pre><code>curl -L http://xrl.us/perlbrewinstall | bash
</code></pre>

<p>或者你也可由 CPAN Shell 安裝</p>

<pre><code>sudo cpan App::perlbrew
perlbrew init
</code></pre>

<p>安裝完畢後，預設的 Perlbrew 根目錄會在 ~/perl5/perlbrew 底下。</p>

<p>並且將以下指令加入到你的 bashrc, zshrc 或是 csh 內:</p>

<p>For bash / zsh</p>

<pre><code>source ~/perl5/perlbrew/etc/bashrc
</code></pre>

<p>For csh</p>

<pre><code>source ~/perl5/perlbrew/etc/cshrc
</code></pre>

<h2>使用</h2>

<p>使用下列指令可以查看現有哪些版本的 Perl 可以使用</p>

<pre><code>$ perlbrew available

perl-5.15.3
perl-5.14.2
perl-5.12.4
perl-5.10.1
perl-5.8.9
perl-5.6.2
perl5.005_04
perl5.004_05
perl5.003_07
</code></pre>

<p>接著，選擇你想安裝的 Perl ，安裝他:</p>

<pre><code>$ perlbrew install 5.14.2

Fetching perl-5.14.2 as /Users/c9s/perl5/perlbrew/dists/perl-5.12.4.tar.gz

Installing /Users/c9s/perl5/perlbrew/build/perl-5.14.2 into ~/perl5/perlbrew/perls/perl-5.14.2

This could take a while. You can run the following command on another shell to track the status:

    tail -f ~/perl5/perlbrew/build.log
</code></pre>

<p>如果你對於安裝進度好奇，可以使用上面指示的 tail 指令來查看目前安裝的狀態。</p>

<p>安裝完畢，你可以使用 list 命令來查看那些版本的 Perl 被安裝了:</p>

<pre><code>$ perlbrew list
</code></pre>

<p>接著，要切換到不同版本的 Perl ，你可以使用:</p>

<pre><code>$ perlbrew switch perl-5.14.2
</code></pre>

<p>接著確認一下你現在使用的 Perl:</p>

<pre><code>$ perl -v
This is perl 5, version 14, subversion 2 (v5.14.2) built for darwin-2level
</code></pre>

<p>如果你暫時不想使用 perlbrew ，可執行 <code>off</code> 命令</p>

<pre><code>$ perlbrew off
</code></pre>

<p>如此就會將 perlbrew 關掉，再使用 <code>which</code> 命令查看一下目前使用的 Perl ，就會回到 Vendor 版本的 Perl 了。</p>

<pre><code>$ which perl
/opt/local/bin/perl
</code></pre>

<h3>cpanminus</h3>

<p>cpanminus 是日本的 @miyagawa (bulknews.typepad.com) 所開發的一個極小、不需設定、無相依性、快速的 CPAN 模組安裝工具。</p>

<p>如果你喜歡 cpanminus ，也可使用下列指令安裝 perlbrew 提供的 cpanm</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>該 cpanm 可安裝模組至目前使用的 Perl 版本函式庫內。</p>

<p>可以透過 which 命令來觀察一下現在所使用的 cpanm</p>

<pre><code>$ which cpanm
/Users/c9s/perl5/perlbrew/bin/cpanm
</code></pre>

<p>透過該 cpanm 安裝模組，是不需要 <code>sudo</code> 的:</p>

<pre><code>$ cpanm Moose
</code></pre>

<p>使用該 cpanm 安裝模組，則會將模組安裝到目前使用版本的 Perl 函式庫內，這些函式庫放置在 ~/perl5/perlbrew/perls 底下:</p>

<pre><code>% ls -l ~/perl5/perlbrew/perls 
drwxr-xr-x  5 c9s  staff  170  9 25 13:12 perl-5.14.1
drwxr-xr-x  6 c9s  staff  204 10  7 11:27 perl-5.14.2-llvm
drwxr-xr-x  5 c9s  staff  170  9 25 02:33 perl-5.15.3
</code></pre>

<p>若使用 tree 命令觀察路徑結構，則如下:</p>

<pre><code>$ tree ~/perl5/perlbrew/perls/perl-5.14.1/lib | head 
/Users/c9s/perl5/perlbrew/perls/perl-5.14.1/lib
├── 5.14.1
│   ├── AnyDBM_File.pm
│   ├── App
│   │   ├── Cpan.pm
│   │   ├── Prove
│   │   │   ├── State
│   │   │   │   ├── Result
│   │   │   │   │   └── Test.pm
│   │   │   │   └── Result.pm
</code></pre>

<p>你也可以使用 perl -V 查看目前所使用的 @INC (函式庫搜尋路徑)</p>

<pre><code>$ perl -V
Summary of my perl5 (revision 5 version 14 subversion 2) configuration:
... 略 ...
Built under darwin
Compiled at Oct  4 2011 13:56:16
%ENV:
    PERLBREW_HOME="/Users/c9s/.perlbrew"
    PERLBREW_PATH="/Users/c9s/perl5/perlbrew/bin:/Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/bin"
    PERLBREW_PERL="perl-5.14.2-llvm"
    PERLBREW_ROOT="/Users/c9s/perl5/perlbrew"
    PERLBREW_VERSION="0.29"
    PERLDOC="-otext"
    PERL_MM_USE_DEFAULT="1"
@INC:
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/site_perl/5.14.2/darwin-2level
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/site_perl/5.14.2
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/5.14.2/darwin-2level
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/5.14.2
</code></pre>

<p>Perl 相關的環境變數也會列舉出來。</p>

<h3>local::lib</h3>

<p>local::lib 模組是可讓你將所有模組安裝至某特定路徑下的工具，也因此，利用 local::lib ，你可以在不需要 Root permission (sudo) 的情況下，
安裝模組至某一目錄，然後讓你的 Perl 去使用他。</p>

<p>local::lib 的範例如下:</p>

<pre><code>  # Install LWP and its missing dependencies to the '~/perl5' directory
  perl -MCPAN -Mlocal::lib -e 'CPAN::install(LWP)'
</code></pre>

<p>以上可安裝 LWP 模組至 ~/perl5 目錄下。</p>

<p>你也可將 local::lib 環境變數列印出來:</p>

<pre><code>  $ perl -Mlocal::lib
  export PERL_MB_OPT='--install_base /home/username/perl5'
  export PERL_MM_OPT='INSTALL_BASE=/home/username/perl5'
  export PERL5LIB='/home/username/perl5/lib/perl5/i386-linux:/home/username/perl5/lib/perl5'
  export PATH="/home/username/perl5/bin:$PATH"
</code></pre>

<p>在使用 Perlbrew 的情況下，如果你在不同版本的 Perl 中，使用同一個 local::lib 路徑，很可能會遇到編譯的二進位檔案不相容的問題。</p>

<p>也因此，Perlbrew 提供了新的功能 -- <code>lib</code> ，在不同版本的 Perl 中，你可以建立出獨立的 local::lib 空間，而不受到影響:</p>

<pre><code>$ perlbrew lib create nobita
</code></pre>

<p>以上指令可在目前版本的 Perl 中，建立一個名為 nobita 的 local::lib 函式庫空間。</p>

<p>若要指令版本建立 local::lib 函式庫空間，也可執行以下指令:</p>

<pre><code>$ perlbrew lib create perl-5.12.3@shizuka
</code></pre>

<p>若要列出所有的 local::lib 空間:</p>

<pre><code>$ perlbrew lib list
</code></pre>

<p>若要切換使用的 local::lib 空間:</p>

<pre><code>$ perlbrew lib use nobita
</code></pre>

<p>如此，你可以利用 cpanm 將模組安裝至不同的 local::lib 函式庫空間內，在不同專案中，很可能會使用到
不同版本、不同相依性的模組，你便可以利用這樣的功能，來測試專案、模組之間的相容性。</p>

<h3>Perl Delta</h3>

<p>關於 Perl 版本的變動，可以使用 perldoc 查閱相關資訊</p>

<pre><code>$ perldoc perl
</code></pre>

<p>可查閱 perl 文件的索引，如以下這些文件項目，便包含了該版本修改、新增的地方:</p>

<pre><code>perldelta           Perl changes since previous version
perl5141delta       Perl changes in version 5.14.1
perl5140delta       Perl changes in version 5.14.0
perl51311delta      Perl changes in version 5.13.11
perl51310delta      Perl changes in version 5.13.10
perl5139delta       Perl changes in version 5.13.9
</code></pre>

<p>欲查閱項目，可下以下指令:</p>

<pre><code>perldoc perl5140delta
</code></pre>

<p>或者可在 Meta CPAN (https://metacpan.org/module/perl) 
或 CPAN Search (http://search.cpan.org/dist/perl/pod/perl5141delta.pod) 上找到。</p>

<h2>結論</h2>

<p>由於近年來 Perl 版本快速的釋出，Perlbrew 可讓使用者及早使用新版本的 Perl，
這些都帶動了 Perl 程式語言以及社群蓬勃發展。</p>

<p>開發者可以使用不同版本的 Perl 來確保模組的運行
，也可使用較舊版的 Perl 來為模組除錯，確保 Perl5 中重要的向後相容，
也可為了效能的改善，而安裝較新的 Perl。</p>

<p>也因此，Perlbrew 可稱為現代 Perl 工具鏈中的一大利器。</p>

<h3>相關模組</h3>

<ul>
<li>local::lib</li>
<li>App::cpanminus</li>
<li>cpansearch</li>
<li>cpan-outdated</li>
</ul>

<h2>關於 Perlbrew 作者</h2>

<p>劉康民 (gugod)</p>

<p>Twitter: twitter.com/gugod </p>

<p>Blog: gugod.org</p>

<p>劉康民 ( gugod ) 為和多股份有限公司創辨人之一, 目前任職程式設計師。</p>

<p>主要專長：Perl、Javascript、Ruby 程式語言。</p>

<h2>作者</h2>

<p>林佑安 (c9s) <a href="mailto:cornelius.howl@gmail.com">cornelius.howl@gmail.com</a></p>

<p>目前任職程式設計師。 主要專長：Perl、Vim、Javascript、PHP 等程式語言。</p>

<p>為 CPAN 模組開發者，於 CPAN 上開發 20 多個 CPAN 模組專案，如 Vimana, cpansearch 等。
以及 Vim Plugin 相關開發，如 perlomni.vim Perl 自動補完插件。</p>

<p>Twitter: <a href="http://twitter.com/c9s">http://twitter.com/c9s</a></p>

<p>Blog: <a href="http://c9s.blogspot.com">http://c9s.blogspot.com</a></p>

<h2>參考</h2>

<p>perldoc local::lib</p>

<p>perldoc App::perlbrew</p>

<p>Perl source: porting/release_manager_guide.pod</p>

<p><a href="http://www.slideshare.net/obrajesse/perl-5120">perl5.12.0</a></p>

<p><a href="http://www.slideshare.net/obrajesse/perl-516-and-beyond">perl5.16 and beyond</a></p>

<p><a href="http://www.slideshare.net/alex.muntada/modern-perl-toolchain">Modern Perl Toolchain</a></p>

<p><a href="http://www.perlbrew.pl/">Perlbrew.pl</a></p>

<p><a href="http://www.slideshare.net/gugod/perlbrew-yapcasia2010talk">Perlbrew YAPC Asia 2010</a></p>

<p><a href="http://gugod.org/2011/09/perlbrew-development-and-git-flow/">Perlbrew development and the git flow</a></p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.33.html" type="text/html"/>
    <title>Perlbrew Release 0.33</title>
    <updated>2011-11-14T05:01:08+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.33 is a small maintenance release</p>

<ul>
<li>Remove Text::Levenshtein from the standalone executable.</li>
<li>Rearrange documentation so all perlbrew command usage document can be found in <code>perldoc perlbrew</code>
<ul>
<li>In the future, App::perlbrew POD should only contain the API doc for the module.</li>
</ul></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.32.html" type="text/html"/>
    <title>Perlbrew Release 0.32</title>
    <updated>2011-11-12T00:12:08+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.32 is a hotfix change just to update the standalone executable for
the 0.31 release, which is broken due to the lack of <code>local::lib</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.31.html" type="text/html"/>
    <title>Perlbrew Release 0.31</title>
    <updated>2011-11-03T20:01:12+01:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.31 is a rather experimenting release with these major changes, please
fully read this release note before upgrading.</p>

<ul>
<li>NOTICE: Remove $PERLBREW_ROOT/Conf.pm if it's there, and re-run <code>perlbrew mirror</code></li>
<li>perlbrew help system is changing. <code>perlbrew help &lt;command&gt;</code> now displays brief documentation for the command.</li>
<li>Add a global <code>--root</code> argument for all commands that can be used as a quick alternative to set PERLBREW_ROOT env var.</li>
<li>Avoid display paths to external/system perl in the output of <code>perlbrew list</code></li>
<li>Replace Text::Levenshtein with a minimal implementation -- the standalone executable get to be smaller.</li>
</ul>

<h2>Renaming the Conf.pm file</h2>

<p>If you ever used <code>perlbrew mirror</code> to choose mirror sites, you need to re-run
<code>perlbrew mirror</code> after installing this release.</p>

<h2>Better for scripting</h2>

<p>There are demands to invoke perlberw commands from shell scripts, crontab or
anywhere that is not an interactive shell. perlbrew has been improving to make
it easier to run commands from a shell script. One of the biggest hassle is
the requirement of PERLBREW_ROOT environment variable.</p>

<p>Almost all perlbrew commands now recognize a <code>--root</code> arg and treat its value as
a path of perlberw root dir. For example, you can run these command to install
perls into different locations:</p>

<pre><code>/usr/local/bin/perlbrew --root /usr/perls install 5.14.2
/usr/local/bin/perlbrew --root /opt/perls install 5.14.2
/usr/local/bin/perlbrew --root /mnt/perls install 5.14.2
</code></pre>

<p>Full path to perlbrew is used in the example to denote that it is not invoking
<code>perlbrew</code> bash function.</p>

<p>The perlbrew root dirs need to be a previously initialized directory, but you may
do so with:</p>

<pre><code>/usr/local/bin/perlbrew --root /usr/perls init
/usr/local/bin/perlbrew --root /opt/perls init
/usr/local/bin/perlbrew --root /mnt/perls init
</code></pre>

<p>In this case, it is not mandatory to follow the on-screen instruction to include
the bashrc/cshrc in you shell at all.</p>

<p>A small caveat for the <code>exec</code> command with <code>--root</code> arg: put <code>--root</code> arg before
the word <code>exec</code> like this:</p>

<pre><code>/usr/local/bin/perlbrew --root /mnt/perls exec myprog.pl --arg value
</code></pre>

<p>Since it is expected that every words after <code>exec</code> are the actual command to run.</p>

<p>General rule of thumb: put <code>--root</code> arg right after <code>perlbrew</code> when you need to
specify it.</p>

<p>However, if you need to invoke <code>use</code> or <code>switch</code> command from your shell script,
it is still required to include the perlbrew bashrc file in your shell script.
Without doing so, they spawn a sub-shell process, which is never a desired
outcome.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.30.html" type="text/html"/>
    <title>Perlbrew Release 0.30</title>
    <updated>2011-10-14T00:21:27+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.30 contain these major changes</p>

<ul>
<li>local::lib integration</li>
<li>Skip runs of exec on aliases</li>
<li>Respect -f flag when installing to replace an already installed perl.</li>
<li>Redefine the default value of -q flag to be false, and define it's meaning to be "complete silent"</li>
</ul>

<h2>The YAPC release</h2>

<p>This is the release for YAPC::Asia 2011, featuring the local::lib integraton. Use the new command <code>lib</code>
to manage local::lib containers:</p>

<pre><code>perlbrew lib create nobita
perlbrew lib create perl-5.12.3@shizuka
perlbrew lib list
perlbrew use perl-5.12.3@shizuka
perlbrew use perl-5.14.2@nobita
perlbrew switch perl-5.14.2@nobita
perlbrew lib delete perl-5.12.3@nobita
</code></pre>

<p>The usage example and documentation is available by running <code>perlbrew lib</code> or <code>perlbrew help lib</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-development-and-the-git-flow.html" type="text/html"/>
    <title>Perlbrew development and the git flow</title>
    <updated>2011-09-24T10:32:10+02:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The prerlbrew source repository on github sets the default branch to "develop", while there is still a "master" branch like usual git repositories. Each serves their own purpose.</p>

<p>The "master" branch is a stable branch, and gets updated only on release. Whenever people checkout the master branch, they get the source code of the latest release of perlbrew. It also contain the stable version of <code>perlbrew</code> standalone executable, and the perlbrew installer program.</p>

<p>The "develop" branch, is where random commits go. Well not really randomly, but it is where I personally commit new features, and accepting pull requests. Anyone who wish to try the nightly version of perlbrew can download the develop perlbrew executable from <a href="https://github.com/gugod/App-perlbrew/raw/develop/perlbrew">https://github.com/gugod/App-perlbrew/raw/develop/perlbrew</a></p>

<p>They are named so because I personally adapt the <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a> convention when working on perlbrew. When working on a feature that is likely taking quite some time to finish, a local feature branch is created, and not necessarily pushed to the github. This way, when there are pending pull requests, they do not have to wait too long, since they can be merged into develop branch first.</p>

<p>Pull requests always merged into the "develop" branch. If you are willing to contribute, make sure sending me pull requests against the develop branch but not the master branch. This should the default on github UI now, but it is still mentioned so everyone can know I intentionally set "develop" branch to be the default.</p>

<p>At this moment contributors all have their own fork of perlbrew repository, and I have not grant any commit bit at all. The truth is, I never need to. Github forks are naturally branches that can be easily managed with git commands, and I do not need to talk to anybody through the workflow at all. People simply work on their own fork with whatever branching model they feel like to, and I always accept new changes to my develop branch.</p>

<p>I feel like it is an ideal situation that no arguments about branching convention or naming are needed. People just commit something, and let me worry about the merge and release latter on.</p>

<p>Does it slow down the development pace due to the need of pull requests ? Well, maybe, but perlbrew is an open source project with no strict development and release cycles. When things are slowing down, it usually means that people are just busy working something else. Besides, every pul requests come with a message from the developers describing what's changed. If they simply commit changes without talking to me afterward, I then have to figure it out on my own to decide if it's good to release. Sometimes that is just tedious.</p>

<p>Anyway, there will be a <a href="http://yapcasia.org/2011/talk/65">talk about perlbrew</a> in the upcoming YAPC::Asia, I will be introducing this project again (it was presented in the last YAPC::Asia too), mostly about the updates since last year, and that are a few very important ones. If you want to make something awesome that I can talk about, make sure to send me the pull request !</p>

<p>peace out, gugod</p>
</div>
    </content>
  </entry>
</feed>
