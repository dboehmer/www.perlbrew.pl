<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>perlbrew</title>
  <link rel="alternate" href="http://perlbrew.pl" type="text/html"/>
  <link rel="self" href="http://perlbrew.pl/atom.xml" type="application/atom+xml"/>
  <updated>2011-12-28T09:40:46Z</updated>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.37.html" type="text/html"/>
    <title>Perlbrew Release 0.37</title>
    <updated>2011-12-28T17:40:15+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.37 features these changes</p>

<ul>
<li>fix ENV mess after switching to diffirent libs multiple times</li>
<li>add --sitecustomize option. For more detail, read: <a href="Install-a-sitecustomize.pl-file-with-Perlbrew.html">Install a sitecustomize.pl file with Perlbrew</a></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/" type="text/html"/>
    <title>Perlbrew</title>
    <updated>2011-12-28T16:47:46+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew is a admin-free perl installation management tool.</p>

<h2>Install, quickly</h2>

<p>Copy &amp; Paste this line into your terminal:</p>

<pre><code>curl -kL http://install.perlbrew.pl | bash
</code></pre>

<p>This step is the quickest and does not require super-user permission. If you
prefer to install with cpan, there are two steps:</p>

<pre><code>sudo cpan App::perlbrew
perlbrew init
</code></pre>

<p>If installed with cpan, the perlbrew executable should be installed as
<code>/usr/bin/perlbrew</code> or <code>/usr/local/bin/perlbrew</code>.  For all users who want to use
perlbrew, a prior <code>perlbrew init</code> needs to be executed.</p>

<p>The default perlbrew root directory is <code>~/perl5/perlbrew</code>, which can be changed
by setting <code>PERLBREW_ROOT</code> environment variables before the installation and
initialization. For more advanced installation process, please read <a href="http://metacpan.org/module/App::perlbrew">the
perlbrew document</a>.</p>

<p>The latest version is 0.37, read the release note: <a href="Release-0.37.html">Release 0.37</a>.</p>

<h2>What is perlbrew</h2>

<p>perlbrew is a tool to manage multiple perl installations in your
<code>$HOME</code> directory. They are completely isolated perl universes.
This approach has many benefits:</p>

<ul>
<li>No need to run <code>sudo</code> to install CPAN modules, any more.</li>
<li>Try the monthly released new perls.</li>
<li>Learn new language features.</li>
<li>Test production code.</li>
<li>Leave vendor perl (the one that comes with OS) alone
<ul>
<li>Vendor perl usually serves its own purposes, and it might be a bad idea to mess it up too much.</li>
<li>Especially PITA when trying to upgrade system perl.</li>
<li>Some vendors <a href="http://perlnews.org/2011/04/dealing-with-xcode-4-and-cpan-breakage/">introduced their own perl bugs</a>, <a href="http://www.theregister.co.uk/2009/02/16/apple_update_perl_breakage/">twice</a>!</li>
</ul></li>
<li>Hacking perl internals.</li>
<li>Just to keep up with fashion.</li>
</ul>

<p>While the default is good enough, you may customize it to install to alternative places, or even let multiple users share the whole perlbrew environment.</p>

<h2>perlbrew is simple</h2>

<p>To install the latest stable release, and use it permanently:</p>

<pre><code>perlbrew install perl-5.14.2
perlbrew switch perl-5.14.2
</code></pre>

<p>To play with the bleeding-edge version, but only in the current shell:</p>

<pre><code>perlbrew install perl-blead
perlbrew use perl-blead
</code></pre>

<p>Runs <code>myprogram.pl</code> against all installations of perl, especially helpful when running tests:</p>

<pre><code>perlbrew exec myprogram.pl
</code></pre>

<p>For more descriptions about commands,</p>

<pre><code>perlbrew help
</code></pre>

<h2>Articles</h2>

<ul>
<li><a href="Perlbrew-中文簡介.html">Perlbrew 中文簡介</a></li>
<li><a href="Perlbrew-development-and-the-git-flow.html">Perlbrew development and the git flow</a></li>
<li><a href="Perlbrew-In-Shell-Scripts.html">Perlbrew In Shell Scripts</a></li>
<li><a href="Perlbrew-and-Friends.html">Perlbrew and Friends</a></li>
<li><a href="FixLion.html">FixLion</a> Read this if you having issue build new perl on Mac OS X 1.7 (Lion)</li>
</ul>

<h2>Development</h2>

<p>perlbrew has always been improving, it is a open source project for
everyone to participate. There are currently over
<a href="https://github.com/gugod/App-perlbrew/contributors">30 contributors</a> and
growing.  The code repository is located on
<a href="https://github.com/gugod/App-perlbrew">github</a>. Feel free to send a
bug report, a pull request, or a beer. Everything helps :)</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Install-a-sitecustomize.pl-file-with-perlbrew.html" type="text/html"/>
    <title>Install a sitecustomize.pl file with perlbrew</title>
    <updated>2011-12-28T16:46:42+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>When perl is compiled with <code>-Dusesitecustomize</code> it will look for a file in the <code>$Config{siteperl}</code> directory called <code>sitecustomize.pl</code> and execute it extremely early in the life of the interpreter.  (See <a href="http://perldoc.perl.org/perlrun.html">perldoc perlrun</a> and the <code>-f</code> switch for an explanation.)</p>

<p>Perlbrew 0.37 adds the <code>--sitecustomize</code> installation option to specify a Perl file to be installed as <code>sitecustomize.pl</code>. (Perlbrew will also set <code>-Dusesitecustomize</code> automatically.)</p>

<pre><code>$ perlbrew install perl-5.14.2 --sitecustomize /path/to/customize.pl
</code></pre>

<p>This is extremely useful for doing dynamic manipulation of the environment or perl globals.  In particular, it can be used to modify @INC in a more customized way than can be achieved with <code>PERL5LIB</code>.</p>

<p>Consider this usage example: A user wants to be able to install a command line perl application like App::Ack and have it be available regardless of which perl is active with Perlbrew.  Further, the user would like to keep its dependencies isolated so that the Perlbrew-installed perl stays 'pure'.</p>

<p>A good way to install an isolated application is to use <code>local::lib</code> with Perlbrew:</p>

<pre><code>$ perlbrew lib create ack
$ perlbrew use perl-5.14.2@ack
$ cpanm App::Ack
</code></pre>

<p>This installs the 'ack' program to the <code>bin</code> directory of the configured local library directory.  If the user switches to another Perl or another local library directory, <code>ack</code> won't be available.  The user can't run <code>ack</code> directly out of the local library <code>bin</code> directory because <code>PERL5LIB</code> won't be set correctly to find its dependencies.</p>

<p>There are many ways to solve this problem.  One approach is to use a <code>sitecustomize.pl</code> file.  The following <code>sitecustomize.pl</code> file checks to see if the executing script appears to be installed in a
local library that follows the <code>INSTALL_BASE</code> convention.  If so, it <strong>automatically</strong> adds the proper library path to <code>@INC</code>:</p>

<pre><code>use strict;
use Config;
use Cwd ();
my %seen;
my @bindirs =
  grep { defined &amp;&amp; !$seen{$_}++ } 
  map { $Config{"install". $_} }
  map { ("${_}bin", "${_}script") } "", "site", "vendor";

my $script = Cwd::realpath($0);

if ( ! grep { /\Q$script\E/ } @bindirs ) {
  my @path = split "/", $script;
  if ( @path &gt; 2 ) { # at least /bin/foo
    pop @path; # get rid of script filename
    my $installbase = join("/", @path[0 .. $#path-1], 'lib', 'perl5');
    if ( $path[-1] eq 'bin' &amp;&amp; -d $installbase ) {
      require lib;
      lib-&gt;import($installbase);
    }
  }
}
</code></pre>

<p>That lets the user switch Perlbrew perls but still run the original <code>ack</code> program via an alias.</p>

<pre><code>$ alias ack=`which ack`
$ perlbrew use perl-5.10.2
$ ack PATTERN
</code></pre>

<p>The <code>ack</code> that is run via the alias has a shebang line (<code>#!...</code>) that invoke the original perl, which will run <code>sitecustomize.pl</code>, which will fix up <code>@INC</code> and then <code>ack</code> will run successfully, finding its dependencies in <code>@INC</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Home.html" type="text/html"/>
    <title>Welcome to the App-perlbrew wiki!</title>
    <updated>2011-12-28T16:45:38+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>How To Information</h2>

<ul>
<li><a href="Reinstall-All-Modules-On-New-Perl.html">Reinstall-All-Modules-On-New-Perl</a></li>
<li><a href="Perlbrew-中文簡介.html">Perlbrew 中文簡介</a></li>
<li><a href="Install-a-sitecustomize.pl-file-with-Perlbrew.html">Install a sitecustomize.pl file with Perlbrew</a></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.36.html" type="text/html"/>
    <title>Perlbrew Release 0.36</title>
    <updated>2011-12-18T02:54:56+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.36 is just to make it installable with <code>cpan</code>, there are no feature changes:</p>

<ul>
<li>fix test errors on freebsd that makes it uninstallable</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.35.html" type="text/html"/>
    <title>Perlbrew Release 0.35</title>
    <updated>2011-12-17T13:08:35+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.35 is a maintenance release with these fixes:</p>

<ul>
<li>fixes for cpantester failures</li>
<li>requiers local::lib version 1.008</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.34.html" type="text/html"/>
    <title>Perlbrew Release 0.34</title>
    <updated>2011-12-16T06:54:25+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.34 is a maintenance release with some fixes, and some new stuffs.</p>

<ul>
<li>Awesome URLs:
<ul>
<li>The installer: http://install.perlberw.pl</li>
<li>The program: http://get.perlberw.pl</li>
</ul></li>
<li>Fix: remove duplicated items from the output of <code>perlbrew list</code>.</li>
<li>New Command: self-install.
<ul>
<li>This is actually renamed from an undocumented command <code>install-perlbrew</code></li>
<li>Plus it gets documented.</li>
</ul></li>
<li>Provide aditional bash completion control helper commands.</li>
<li>Documentation fixes / typo corrections.</li>
<li>alter MANPATHs, see GH #173</li>
<li>Allow the representation like '@lib' te mean "a lib name under current perl.". See GH #153</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-ä¸­æç°¡ä».html" type="text/html"/>
    <title>Perlbrew</title>
    <updated>2011-11-29T21:18:49+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>本篇文章同步刊載於中研院自由軟體鑄造場 <a href="http://www.openfoundry.org/tw/tech-column/8514-perlbrew-perl-installation-management-tool">http://www.openfoundry.org/tw/tech-column/8514-perlbrew-perl-installation-management-tool</a>.</p>

<ul>
<li>林佑安 (c9s) <a href="mailto:cornelius.howl@gmail.com">cornelius.howl@gmail.com</a></li>
</ul>

<h2>緣起</h2>

<p>Perl5 的開發，以往有個習俗，也就是每一次的版本釋出，都由一位 Pumpking (patch pumpkin) 來主導，這位 Pumpking 得處理 patch，處理新功能，更新核心模組，處理 Regression, Build 以及一般的修正，處理二進位檔的相容性等等的工作。</p>

<p>也就是說，在以往，作為一位 Pumpking ，你必須是一位硬底子的 C 語言黑客，相當熱愛 Perl，且必須要有責任感，然後得同時為專案管理經理，要處理新版本釋出，得相當了解編譯器，能處理 Patch，也要能夠設計程式語言。</p>

<p>這些工作相當的難，而且也相當花時間。</p>

<p>舉例來說，Perl 5.8.8 至 Perl 5.10.0 的釋出，就花了 5 年的時間，且燒光了兩位相當厲害的黑客的氣力，其中包含 Hugo van der sanden(hvds) 以及 Rafael Garcia Suarez (rgs)，他們分別在 2004 年以及 2009 年退出了這項工作。</p>

<p>處理 perl5.10.1 釋出的 Dave Mitchell 也說 「這些事情實在*<em>相當的</em>*難」，最後 Dave Mitchell 也在 2009 年十月時退出了這份工作。</p>

<p>所以 Perl 團隊改善了版本釋出流程，將各種不同工作委派給專職的人員，讓 Pumpking 專心在版本釋出的工作上。</p>

<p>以往從 2007 年開始，Perl 5.9.0, 5.9.1, 5.9.2 一直到 5.9.5，每個版本之間的釋出都至少花了一年的時間，而流程改善之後， 5.11.0, 5.11.1, 5.11.2 一直到 5.13 ，每個版本只花了一個月的時間釋出。 一直到現在，Perl 釋出的版本已經到 5.15.3 。</p>

<p>Jesse Vincent 說，處理 5.11.0 釋出只花了他四天時間，5.11.1 只花了他兩天的時間，而現在處理每個新版的釋出，甚至不用到一天。</p>

<p>除了釋出變快了，每次釋出能夠納入的修正、新設計也變多了。</p>

<p>也因此，為了能夠使用最新的、不同版本的 Perl，新的需求產生出來了，而滿足這個需求的解決方案就是 Perlbrew。</p>

<h2>簡介</h2>

<p>2010 年二月，CPAN 模組開發者，劉康民 (gugod) 釋出了 App::perlbrew 模組，該模組是以 Ruby 的 RVM 概念出發，也就是使用者可以使用 Perlbrew 將不同版本的 Perl 安裝在 $HOME 路徑內，並且使用 Perlbrew 來切換不同版本的 Perl 使用。</p>

<p>使用 Perlbrew 有幾個優點:</p>

<ul>
<li>不需要使用 sudo 來安裝 CPAN 模組</li>
<li>可以使用每個月不斷釋出的新的 Perl</li>
<li>可嘗試新的程式語言功能</li>
<li>可以不再被 Vendor Perl 限制 (平台內建的 Perl)</li>
<li>可在不同版本的 Perl 下測試模組</li>
<li>可整合至 bash, zsh, csh 環境變數</li>
</ul>

<h2>安裝</h2>

<p>將下面這行 Shell 指令貼入您的終端機內執行:</p>

<pre><code>curl -L http://xrl.us/perlbrewinstall | bash
</code></pre>

<p>或者你也可由 CPAN Shell 安裝</p>

<pre><code>sudo cpan App::perlbrew
perlbrew init
</code></pre>

<p>安裝完畢後，預設的 Perlbrew 根目錄會在 ~/perl5/perlbrew 底下。</p>

<p>並且將以下指令加入到你的 bashrc, zshrc 或是 csh 內:</p>

<p>For bash / zsh</p>

<pre><code>source ~/perl5/perlbrew/etc/bashrc
</code></pre>

<p>For csh</p>

<pre><code>source ~/perl5/perlbrew/etc/cshrc
</code></pre>

<h2>使用</h2>

<p>使用下列指令可以查看現有哪些版本的 Perl 可以使用</p>

<pre><code>$ perlbrew available

perl-5.15.3
perl-5.14.2
perl-5.12.4
perl-5.10.1
perl-5.8.9
perl-5.6.2
perl5.005_04
perl5.004_05
perl5.003_07
</code></pre>

<p>接著，選擇你想安裝的 Perl ，安裝他:</p>

<pre><code>$ perlbrew install 5.14.2

Fetching perl-5.14.2 as /Users/c9s/perl5/perlbrew/dists/perl-5.12.4.tar.gz

Installing /Users/c9s/perl5/perlbrew/build/perl-5.14.2 into ~/perl5/perlbrew/perls/perl-5.14.2

This could take a while. You can run the following command on another shell to track the status:

    tail -f ~/perl5/perlbrew/build.log
</code></pre>

<p>如果你對於安裝進度好奇，可以使用上面指示的 tail 指令來查看目前安裝的狀態。</p>

<p>安裝完畢，你可以使用 list 命令來查看那些版本的 Perl 被安裝了:</p>

<pre><code>$ perlbrew list
</code></pre>

<p>接著，要切換到不同版本的 Perl ，你可以使用:</p>

<pre><code>$ perlbrew switch perl-5.14.2
</code></pre>

<p>接著確認一下你現在使用的 Perl:</p>

<pre><code>$ perl -v
This is perl 5, version 14, subversion 2 (v5.14.2) built for darwin-2level
</code></pre>

<p>如果你暫時不想使用 perlbrew ，可執行 <code>off</code> 命令</p>

<pre><code>$ perlbrew off
</code></pre>

<p>如此就會將 perlbrew 關掉，再使用 <code>which</code> 命令查看一下目前使用的 Perl ，就會回到 Vendor 版本的 Perl 了。</p>

<pre><code>$ which perl
/opt/local/bin/perl
</code></pre>

<h3>cpanminus</h3>

<p>cpanminus 是日本的 @miyagawa (bulknews.typepad.com) 所開發的一個極小、不需設定、無相依性、快速的 CPAN 模組安裝工具。</p>

<p>如果你喜歡 cpanminus ，也可使用下列指令安裝 perlbrew 提供的 cpanm</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>該 cpanm 可安裝模組至目前使用的 Perl 版本函式庫內。</p>

<p>可以透過 which 命令來觀察一下現在所使用的 cpanm</p>

<pre><code>$ which cpanm
/Users/c9s/perl5/perlbrew/bin/cpanm
</code></pre>

<p>透過該 cpanm 安裝模組，是不需要 <code>sudo</code> 的:</p>

<pre><code>$ cpanm Moose
</code></pre>

<p>使用該 cpanm 安裝模組，則會將模組安裝到目前使用版本的 Perl 函式庫內，這些函式庫放置在 ~/perl5/perlbrew/perls 底下:</p>

<pre><code>% ls -l ~/perl5/perlbrew/perls 
drwxr-xr-x  5 c9s  staff  170  9 25 13:12 perl-5.14.1
drwxr-xr-x  6 c9s  staff  204 10  7 11:27 perl-5.14.2-llvm
drwxr-xr-x  5 c9s  staff  170  9 25 02:33 perl-5.15.3
</code></pre>

<p>若使用 tree 命令觀察路徑結構，則如下:</p>

<pre><code>$ tree ~/perl5/perlbrew/perls/perl-5.14.1/lib | head 
/Users/c9s/perl5/perlbrew/perls/perl-5.14.1/lib
├── 5.14.1
│   ├── AnyDBM_File.pm
│   ├── App
│   │   ├── Cpan.pm
│   │   ├── Prove
│   │   │   ├── State
│   │   │   │   ├── Result
│   │   │   │   │   └── Test.pm
│   │   │   │   └── Result.pm
</code></pre>

<p>你也可以使用 perl -V 查看目前所使用的 @INC (函式庫搜尋路徑)</p>

<pre><code>$ perl -V
Summary of my perl5 (revision 5 version 14 subversion 2) configuration:
... 略 ...
Built under darwin
Compiled at Oct  4 2011 13:56:16
%ENV:
    PERLBREW_HOME="/Users/c9s/.perlbrew"
    PERLBREW_PATH="/Users/c9s/perl5/perlbrew/bin:/Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/bin"
    PERLBREW_PERL="perl-5.14.2-llvm"
    PERLBREW_ROOT="/Users/c9s/perl5/perlbrew"
    PERLBREW_VERSION="0.29"
    PERLDOC="-otext"
    PERL_MM_USE_DEFAULT="1"
@INC:
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/site_perl/5.14.2/darwin-2level
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/site_perl/5.14.2
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/5.14.2/darwin-2level
    /Users/c9s/perl5/perlbrew/perls/perl-5.14.2-llvm/lib/5.14.2
</code></pre>

<p>Perl 相關的環境變數也會列舉出來。</p>

<h3>local::lib</h3>

<p>local::lib 模組是可讓你將所有模組安裝至某特定路徑下的工具，也因此，利用 local::lib ，你可以在不需要 Root permission (sudo) 的情況下，
安裝模組至某一目錄，然後讓你的 Perl 去使用他。</p>

<p>local::lib 的範例如下:</p>

<pre><code>  # Install LWP and its missing dependencies to the '~/perl5' directory
  perl -MCPAN -Mlocal::lib -e 'CPAN::install(LWP)'
</code></pre>

<p>以上可安裝 LWP 模組至 ~/perl5 目錄下。</p>

<p>你也可將 local::lib 環境變數列印出來:</p>

<pre><code>  $ perl -Mlocal::lib
  export PERL_MB_OPT='--install_base /home/username/perl5'
  export PERL_MM_OPT='INSTALL_BASE=/home/username/perl5'
  export PERL5LIB='/home/username/perl5/lib/perl5/i386-linux:/home/username/perl5/lib/perl5'
  export PATH="/home/username/perl5/bin:$PATH"
</code></pre>

<p>在使用 Perlbrew 的情況下，如果你在不同版本的 Perl 中，使用同一個 local::lib 路徑，很可能會遇到編譯的二進位檔案不相容的問題。</p>

<p>也因此，Perlbrew 提供了新的功能 -- <code>lib</code> ，在不同版本的 Perl 中，你可以建立出獨立的 local::lib 空間，而不受到影響:</p>

<pre><code>$ perlbrew lib create nobita
</code></pre>

<p>以上指令可在目前版本的 Perl 中，建立一個名為 nobita 的 local::lib 函式庫空間。</p>

<p>若要指令版本建立 local::lib 函式庫空間，也可執行以下指令:</p>

<pre><code>$ perlbrew lib create perl-5.12.3@shizuka
</code></pre>

<p>若要列出所有的 local::lib 空間:</p>

<pre><code>$ perlbrew lib list
</code></pre>

<p>若要切換使用的 local::lib 空間:</p>

<pre><code>$ perlbrew lib use nobita
</code></pre>

<p>如此，你可以利用 cpanm 將模組安裝至不同的 local::lib 函式庫空間內，在不同專案中，很可能會使用到
不同版本、不同相依性的模組，你便可以利用這樣的功能，來測試專案、模組之間的相容性。</p>

<h3>Perl Delta</h3>

<p>關於 Perl 版本的變動，可以使用 perldoc 查閱相關資訊</p>

<pre><code>$ perldoc perl
</code></pre>

<p>可查閱 perl 文件的索引，如以下這些文件項目，便包含了該版本修改、新增的地方:</p>

<pre><code>perldelta           Perl changes since previous version
perl5141delta       Perl changes in version 5.14.1
perl5140delta       Perl changes in version 5.14.0
perl51311delta      Perl changes in version 5.13.11
perl51310delta      Perl changes in version 5.13.10
perl5139delta       Perl changes in version 5.13.9
</code></pre>

<p>欲查閱項目，可下以下指令:</p>

<pre><code>perldoc perl5140delta
</code></pre>

<p>或者可在 Meta CPAN (https://metacpan.org/module/perl) 
或 CPAN Search (http://search.cpan.org/dist/perl/pod/perl5141delta.pod) 上找到。</p>

<h2>結論</h2>

<p>由於近年來 Perl 版本快速的釋出，Perlbrew 可讓使用者及早使用新版本的 Perl，
這些都帶動了 Perl 程式語言以及社群蓬勃發展。</p>

<p>開發者可以使用不同版本的 Perl 來確保模組的運行
，也可使用較舊版的 Perl 來為模組除錯，確保 Perl5 中重要的向後相容，
也可為了效能的改善，而安裝較新的 Perl。</p>

<p>也因此，Perlbrew 可稱為現代 Perl 工具鏈中的一大利器。</p>

<h3>相關模組</h3>

<ul>
<li>local::lib</li>
<li>App::cpanminus</li>
<li>cpansearch</li>
<li>cpan-outdated</li>
</ul>

<h2>關於 Perlbrew 作者</h2>

<p>劉康民 (gugod)</p>

<p>Twitter: twitter.com/gugod </p>

<p>Blog: gugod.org</p>

<p>劉康民 ( gugod ) 為和多股份有限公司創辨人之一, 目前任職程式設計師。</p>

<p>主要專長：Perl、Javascript、Ruby 程式語言。</p>

<h2>作者</h2>

<p>林佑安 (c9s) <a href="mailto:cornelius.howl@gmail.com">cornelius.howl@gmail.com</a></p>

<p>目前任職程式設計師。 主要專長：Perl、Vim、Javascript、PHP 等程式語言。</p>

<p>為 CPAN 模組開發者，於 CPAN 上開發 20 多個 CPAN 模組專案，如 Vimana, cpansearch 等。
以及 Vim Plugin 相關開發，如 perlomni.vim Perl 自動補完插件。</p>

<p>Twitter: <a href="http://twitter.com/c9s">http://twitter.com/c9s</a></p>

<p>Blog: <a href="http://c9s.blogspot.com">http://c9s.blogspot.com</a></p>

<h2>參考</h2>

<p>perldoc local::lib</p>

<p>perldoc App::perlbrew</p>

<p>Perl source: porting/release_manager_guide.pod</p>

<p><a href="http://www.slideshare.net/obrajesse/perl-5120">perl5.12.0</a></p>

<p><a href="http://www.slideshare.net/obrajesse/perl-516-and-beyond">perl5.16 and beyond</a></p>

<p><a href="http://www.slideshare.net/alex.muntada/modern-perl-toolchain">Modern Perl Toolchain</a></p>

<p><a href="http://www.perlbrew.pl/">Perlbrew.pl</a></p>

<p><a href="http://www.slideshare.net/gugod/perlbrew-yapcasia2010talk">Perlbrew YAPC Asia 2010</a></p>

<p><a href="http://gugod.org/2011/09/perlbrew-development-and-git-flow/">Perlbrew development and the git flow</a></p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.33.html" type="text/html"/>
    <title>Perlbrew Release 0.33</title>
    <updated>2011-11-14T12:01:08+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.33 is a small maintenance release</p>

<ul>
<li>Remove Text::Levenshtein from the standalone executable.</li>
<li>Rearrange documentation so all perlbrew command usage document can be found in <code>perldoc perlbrew</code>
<ul>
<li>In the future, App::perlbrew POD should only contain the API doc for the module.</li>
</ul></li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.32.html" type="text/html"/>
    <title>Perlbrew Release 0.32</title>
    <updated>2011-11-12T07:12:08+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.32 is a hotfix change just to update the standalone executable for
the 0.31 release, which is broken due to the lack of <code>local::lib</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.31.html" type="text/html"/>
    <title>Perlbrew Release 0.31</title>
    <updated>2011-11-04T03:01:12+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.31 is a rather experimenting release with these major changes, please
fully read this release note before upgrading.</p>

<ul>
<li>NOTICE: Remove $PERLBREW_ROOT/Conf.pm if it's there, and re-run <code>perlbrew mirror</code></li>
<li>perlbrew help system is changing. <code>perlbrew help &lt;command&gt;</code> now displays brief documentation for the command.</li>
<li>Add a global <code>--root</code> argument for all commands that can be used as a quick alternative to set PERLBREW_ROOT env var.</li>
<li>Avoid display paths to external/system perl in the output of <code>perlbrew list</code></li>
<li>Replace Text::Levenshtein with a minimal implementation -- the standalone executable get to be smaller.</li>
</ul>

<h2>Renaming the Conf.pm file</h2>

<p>If you ever used <code>perlbrew mirror</code> to choose mirror sites, you need to re-run
<code>perlbrew mirror</code> after installing this release.</p>

<h2>Better for scripting</h2>

<p>There are demands to invoke perlberw commands from shell scripts, crontab or
anywhere that is not an interactive shell. perlbrew has been improving to make
it easier to run commands from a shell script. One of the biggest hassle is
the requirement of PERLBREW_ROOT environment variable.</p>

<p>Almost all perlbrew commands now recognize a <code>--root</code> arg and treat its value as
a path of perlberw root dir. For example, you can run these command to install
perls into different locations:</p>

<pre><code>/usr/local/bin/perlbrew --root /usr/perls install 5.14.2
/usr/local/bin/perlbrew --root /opt/perls install 5.14.2
/usr/local/bin/perlbrew --root /mnt/perls install 5.14.2
</code></pre>

<p>Full path to perlbrew is used in the example to denote that it is not invoking
<code>perlbrew</code> bash function.</p>

<p>The perlbrew root dirs need to be a previously initialized directory, but you may
do so with:</p>

<pre><code>/usr/local/bin/perlbrew --root /usr/perls init
/usr/local/bin/perlbrew --root /opt/perls init
/usr/local/bin/perlbrew --root /mnt/perls init
</code></pre>

<p>In this case, it is not mandatory to follow the on-screen instruction to include
the bashrc/cshrc in you shell at all.</p>

<p>A small caveat for the <code>exec</code> command with <code>--root</code> arg: put <code>--root</code> arg before
the word <code>exec</code> like this:</p>

<pre><code>/usr/local/bin/perlbrew --root /mnt/perls exec myprog.pl --arg value
</code></pre>

<p>Since it is expected that every words after <code>exec</code> are the actual command to run.</p>

<p>General rule of thumb: put <code>--root</code> arg right after <code>perlbrew</code> when you need to
specify it.</p>

<p>However, if you need to invoke <code>use</code> or <code>switch</code> command from your shell script,
it is still required to include the perlbrew bashrc file in your shell script.
Without doing so, they spawn a sub-shell process, which is never a desired
outcome.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.30.html" type="text/html"/>
    <title>Perlbrew Release 0.30</title>
    <updated>2011-10-14T06:21:27+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.30 contain these major changes</p>

<ul>
<li>local::lib integration</li>
<li>Skip runs of exec on aliases</li>
<li>Respect -f flag when installing to replace an already installed perl.</li>
<li>Redefine the default value of -q flag to be false, and define it's meaning to be "complete silent"</li>
</ul>

<h2>The YAPC release</h2>

<p>This is the release for YAPC::Asia 2011, featuring the local::lib integraton. Use the new command <code>lib</code>
to manage local::lib containers:</p>

<pre><code>perlbrew lib create nobita
perlbrew lib create perl-5.12.3@shizuka
perlbrew lib list
perlbrew use perl-5.12.3@shizuka
perlbrew use perl-5.14.2@nobita
perlbrew switch perl-5.14.2@nobita
perlbrew lib delete perl-5.12.3@nobita
</code></pre>

<p>The usage example and documentation is available by running <code>perlbrew lib</code> or <code>perlbrew help lib</code>.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-development-and-the-git-flow.html" type="text/html"/>
    <title>Perlbrew development and the git flow</title>
    <updated>2011-09-24T16:32:10+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The prerlbrew source repository on github sets the default branch to "develop", while there is still a "master" branch like usual git repositories. Each serves their own purpose.</p>

<p>The "master" branch is a stable branch, and gets updated only on release. Whenever people checkout the master branch, they get the source code of the latest release of perlbrew. It also contain the stable version of <code>perlbrew</code> standalone executable, and the perlbrew installer program.</p>

<p>The "develop" branch, is where random commits go. Well not really randomly, but it is where I personally commit new features, and accepting pull requests. Anyone who wish to try the nightly version of perlbrew can download the develop perlbrew executable from <a href="https://github.com/gugod/App-perlbrew/raw/develop/perlbrew">https://github.com/gugod/App-perlbrew/raw/develop/perlbrew</a></p>

<p>They are named so because I personally adapt the <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a> convention when working on perlbrew. When working on a feature that is likely taking quite some time to finish, a local feature branch is created, and not necessarily pushed to the github. This way, when there are pending pull requests, they do not have to wait too long, since they can be merged into develop branch first.</p>

<p>Pull requests always merged into the "develop" branch. If you are willing to contribute, make sure sending me pull requests against the develop branch but not the master branch. This should the default on github UI now, but it is still mentioned so everyone can know I intentionally set "develop" branch to be the default.</p>

<p>At this moment contributors all have their own fork of perlbrew repository, and I have not grant any commit bit at all. The truth is, I never need to. Github forks are naturally branches that can be easily managed with git commands, and I do not need to talk to anybody through the workflow at all. People simply work on their own fork with whatever branching model they feel like to, and I always accept new changes to my develop branch.</p>

<p>I feel like it is an ideal situation that no arguments about branching convention or naming are needed. People just commit something, and let me worry about the merge and release latter on.</p>

<p>Does it slow down the development pace due to the need of pull requests ? Well, maybe, but perlbrew is an open source project with no strict development and release cycles. When things are slowing down, it usually means that people are just busy working something else. Besides, every pul requests come with a message from the developers describing what's changed. If they simply commit changes without talking to me afterward, I then have to figure it out on my own to decide if it's good to release. Sometimes that is just tedious.</p>

<p>Anyway, there will be a <a href="http://yapcasia.org/2011/talk/65">talk about perlbrew</a> in the upcoming YAPC::Asia, I will be introducing this project again (it was presented in the last YAPC::Asia too), mostly about the updates since last year, and that are a few very important ones. If you want to make something awesome that I can talk about, make sure to send me the pull request !</p>

<p>peace out, gugod</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-In-Shell-Scripts.html" type="text/html"/>
    <title>Perlbrew In Shell Scripts</title>
    <updated>2011-09-18T20:08:44+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Since the 0.29 release of perlbrew, it is much easier to invoke perlbrew
function in the shell script. Specifically the <code>perlbrew use</code> and <code>perlbrew
switch</code> commands. Here's an example bash script:</p>

<pre><code>#!/bin/bash

## These 3 lines are mandatory.
export PERLBREW_ROOT=/opt/perlbrew
export PERLBREW_HOME=/tmp/.perlbrew
source ${PERLBREW_ROOT}/etc/bashrc

## Do stuff with 5.14.1
perlbrew use 5.14.1
perl /app/my-modern-program

## Do stuff with 5.12.3
perlbrew use 5.12.3
perl /app/my-legacy-program
</code></pre>

<p>In short: definde <code>PERLBREW_ROOT</code> and <code>PERLBREW_HOME</code> before including the perlbrew <code>bashrc</code> file.</p>

<p>In an interactive shell environment, the default value of <code>$PERLBREW_HOME</code> is
<code>$HOME/.perlbrew</code>. However, <code>$HOME</code> might not be always there in the context
when a script is executed. It is then mandatory for you, the programmer, to
specify a <code>$PERLBREW_HOME</code> that can be writable by the user running the script.</p>

<p>Notice, with the bash integeration, the statement <code>perlbrew use 5.14.1</code> actually
invokes the <code>perlbrew</code> bash function instead of the command <code>perlbrew</code>. Previous
perlbrew release contain buggy perlbrew bash function and did not function properly.
Therefore please make sure to upgrade to perlbrew 0.29 or latter.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.29.html" type="text/html"/>
    <title>Perlbrew Release 0.29</title>
    <updated>2011-09-18T17:46:15+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.29 contain improvements with some deprecations:</p>

<ul>
<li>Fix <a href="https://github.com/gugod/App-perlbrew/issues/108">GH #108</a></li>
<li>Add a command <code>switch-off</code> in addition to <code>off</code></li>
<li>Deprecate the special name "system" for command <code>use</code> and <code>system</code></li>
<li>A shell integration fallback mechanism</li>
</ul>

<h2>Deprecate the special name "system"</h2>

<p>After <code>alias</code> command is introduced, it does not make good sense to keep those
special name with special purpose.  <code>perlbrew use system</code> or <code>perlbrew switch
system</code> no longer mean to switch to system perl. The former is now simply <code>perlbrew
off</code>, and the later becames <code>perlbrew switch-off</code>.</p>

<p>The <code>off</code> command behaviour is changed to only affect current shell, while an
additional command <code>switch-off</code> is introduced to let user permananetly turn of
perlbrew.</p>

<h2>shell integration fallback mechanism</h2>

<p>The mechanism to make <code>use</code>, <code>switch</code>, <code>off</code> and <code>switch-off</code> command work needs
to change <code>$PATH</code> on-the-fly, therefore highly depends on shell integration.
For bash and zsh, there is a <code>perlbrew</code> shell function that does all the work.
User of csh / tcsh or other shells might find perlbrew use-less due to lack of
shell function, and therefore not possible to change <code>$PATH</code> in the invocation
of perlbrew commands.</p>

<p>To provide a work-around for non-(ba|z)sh users, a sub-shell is launched with
the tweaked <code>$PATH</code> inside that shell, which you have to <code>exit</code> explicitly
afterward.</p>

<pre><code>% perlbrew use 5.12.3

A sub-shell is launched with perl-5.12.3 as the activated perl. Run 'exit' to finish it.
</code></pre>

<p>As a consequence, it is also possible for users who does not add
<code>source $PERLBREW_ROOT/etc/bashrc</code> in their shell to fallback to the sub-shell
mechanism. However, it is hightly recommend to add that <code>source</code> line if you
use bash or zsh.</p>

<p>If you intend to use perlbrew without its shell integration, there are caveats
on MacOS X that should be notified. A special <code>/usr/libexec/path_helper</code> command
has been used, since Snow Leopard. The shell initialziation processs, which you
cann find it in <code>/etc/profile</code>, <code>/etc/zshenv</code> or <code>/etc/csh.login</code>, set the
initial value of <code>$PATH</code>. As a result, changes to <code>$PATH</code> are lost in sub-shell.
You can confirm it by running these statements in an interactive shell:</p>

<p>## bash user
   % export PATH=/tmp/foobar:${PATH}
   % bash
   % echo $PATH # does not contain /tmp/foobar in the beginning</p>

<p>For this reason, it is impossible for <code>perlbrew</code> command to tweak <code>$PATH</code> value
without you to <code>source</code> its rc files. Also, for the same reason, if your or you
OS provides shell rc that resets <code>$PATH</code> regardless its current value, there is
not much perlbrew can do without the shell integration.</p>

<p>Again, it works much better if you simply use the perlbrew shell integration.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.28.html" type="text/html"/>
    <title>Perlbrew Release 0.28</title>
    <updated>2011-08-10T10:38:37+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.28 is a bug-fixing release:</p>

<ul>
<li>fixes for cpantester</li>
<li>Fix 'switch' and 'use' for bash users, by Woody2143++</li>
<li>The standalone <code>perlbrew</code> file is now packed with fatpacker, by running <code>dev-bin/build.sh</code>. <code>perl Makefile.PL</code> does no trigger a re-build anymore.</li>
<li>Update the installer to grab patchperl 0.46</li>
</ul>

<p>It is also mandatory for users to upgrade Devel::PatchPerl to at least 0.42 (the
latest version is 0.46), in order to fix <a href="http://www.perlbrew.pl/FixLion.html">the building of Perl on MacOSX
Lion</a>. There are also fixes for building on
Ubuntu too.  Generally it is always nice to update Devel::Patchperl to the
latest.</p>

<p>Also due to a futther plan of implementation, the <code>perlbrew</code> standalone
executable is now packed with <code>App::FatPack</code>, which is, IMHO, an awesome tool to
build self-contained executables. In case you do not know yet, the <code>cpanm</code>
execuatble is also packed with <code>App::FatPack</code>.</p>

<p>Also I (<a href="twitter.com/gugod">@gugod</a>) submitted yet another perlbrew talk to the
coming <a href="http://yapcasia.org/2011/">YAPC::Asia 2011</a>. Althought it has already
been talked the last YAPC::Asia, perlbrew was still so young back then. Now the
project has been improved and brought up many attention, I figured it a good
idea to give a talk once again.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/FixLion.html" type="text/html"/>
    <title>Fix For MacOSX Lion</title>
    <updated>2011-07-21T18:26:08+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>If you upgraded to Lion with Xcode 4.1, you may find youself fail to build any
perls with perlbrew. This is because that the newly released <code>/usr/bin/nm</code> does
not work with the perl building system. Luckly, this issues has already been
solved in perl-blead, and <a href="http://metacpan.org/author/BINGOS">BINGOS</a> quickly made a new release of
<a href="http://metacpan.org/release/Devel-PatchPerl">Devel::PatchPerl</a> for us.</p>

<p>To fix this isusse before the next perlbrew release, grab this <code>patchperl</code>
standalone executable, put it in your <code>$PERLBREW_ROOT/bin</code> and <code>chmod +x</code> it:</p>

<pre><code>https://raw.github.com/gist/962406/93cd90f5e6c6a86073afb3815f0ea06c3c9e99ed/patchperl
</code></pre>

<p>That's something like this:</p>

<pre><code>export PERLBREW_ROOT=${HOME}/perl5/perlbrew
curl -k -L https://raw.github.com/gist/962406/93cd90f5e6c6a86073afb3815f0ea06c3c9e99ed/patchperl -o $PERLBREW_ROOT/bin/patchperl
chmod +x $_
</code></pre>

<p>Or if you've previously installed perlbrew by doing <code>cpan App::perlbrew</code>, simply
upgrade your <code>Devel::PatchPerl</code> to 0.42.</p>

<p>As of the time this article is written, the latest release of perlbrew is 0.27, the next release
of perlbrew will fix this issue.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.27.html" type="text/html"/>
    <title>Perlbrew Release 0.27</title>
    <updated>2011-07-10T10:04:31+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.27 is a hotfix release</p>

<ul>
<li>Fix <code>perlbrew install</code> command.</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.26.html" type="text/html"/>
    <title>Perlbrew Release 0.26</title>
    <updated>2011-07-10T08:46:57+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>perlbrew 0.26 is a bug-fixing release:</p>

<ul>
<li>Fix GH #119 </li>
<li>Fix t/08.exit_status.t for cpantesters</li>
<li>Fix several bugs in <code>exec</code> command</li>
<li>Implement GH #103 - install -v shows build.log</li>
<li>Add -Dusedevel when installing blead perl</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.25.html" type="text/html"/>
    <title>Perlbrew Release 0.25</title>
    <updated>2011-06-23T21:34:59+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Big congrats to p5p for releasing 3 branches of perl5 in the same week!</p>

<p>perlbrew 0.25 is basically a bug-fixing release with some small improvements</p>

<ul>
<li>suggest when user types wrong commands</li>
<li>Improvements about self-upgrade</li>
<li>exit with non-zero status code when there's some sort of error</li>
<li>Added verification of existing alias before attempting unalias</li>
<li>Fix <code>install-cpanm</code> for those who uses curl</li>
</ul>

<h2>Command suggestion</h2>

<p>Now when you have a typo in your command names, perlbrew shows you a list of suggestions</p>

<pre><code>&gt; perlbrew lixt
Unknown command: `lixt`. Did you mean one of the following?
    list
    init
    alias
</code></pre>

<p>Thanks <a href="http://search.cpan.org/~rhoelz/">Rob Hoelz</a> for the implementation.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Perlbrew-and-Friends.html" type="text/html"/>
    <title>Perlbrew and Friends</title>
    <updated>2011-06-09T08:55:53+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>If you install perlbrew with the installer as recommended, you might notice that an executable named <code>patchperl</code> is also installed to your <code>~/perl5/perlbrew/bin</code> directory. Also when you read the <code>perlbrew</code> <a href="http://metacpan.org/module/perlbrew">usage documentation</a>, there is a command <code>install-cpanm</code> that installs a standalone executable <code>cpanm</code> to to the same <code>bin</code> directory. Why is perlbrew doing this ?</p>

<p>The program <code>patchperl</code> is a standalone executable of the distribution of <a href="http://metacpan.org/module/Devel::PatchPerl">Devel::PatchPerl</a> by <a href="http://metacpan.org/author/BINGOS">BINGOS</a>, which aims to solve the issues encountered when building old perls (5.6.x, 5.8.x, etc) on modern operating systems. Due to the updates in OS, gcc, or libc, those old perl distributions fail to build due to various configure or library errors. <code>Devel::PatchPerl</code> patches the ancient perl source tree so it can be successfully built.</p>

<p><code>perlbrew</code> requires the <code>patchperl</code> program to be there because it is the best way to make it Just Work. <code>cpanm</code> is an awesome CPAN client that is lightweight, and fast. I use it exclusively these days.</p>

<p>The reason that these programs live under <code>~/perl5/perlbrew/bin</code> is very simple: so they are always available no matter which perl you switch to.</p>

<p>With a proper perlbrew setup, <code>~/perl5/perlbrew/bin</code> should be the first or second item in your <code>$PATH</code>, since <code>perlbrew switch</code> and <code>perlbrew use</code> alters <code>$PATH</code>, it is the best that mandatory programs lives somewhere that's always accessible.</p>

<p>If you install <code>cpanm</code> by doing <code>cpan -i App::cpanminus</code> within a perlbrew environment, you will run into this issue:</p>

<pre><code>perlbrew switch perl-5.12.3
cpan -i App::cpanminus
cpanm Moose # works

perlbrew switch perl-5.14.0
cpanm Moose
#=&gt; cpanm is not found 
</code></pre>

<p>This is because the first <code>cpan</code> (5.12.3) installs <code>cpanm</code> to <code>~/perl5/perlbrew/perls/5.12.3/bin</code>, and the latter <code>perlbrew switch perl-5.14.0</code> removes that from <code>$PATH</code>. If you use <code>cpanm</code> exclusively like I do, you should install it with <code>perlbrew install-cpanm</code>.</p>

<p>In short, <code>patchperl</code> and <code>cpanm</code> are so important, it is best to make them always available.</p>

<p>peace out, gugod.</p>

<hr/>

<p>PS. You may also choose to manually install <code>cpanm</code> to a system-wide path like <code>/usr/local/bin</code>, that way it'll always available too. In that case you do not need to run <code>perlbrew install-cpanm</code> command at all.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.24.html" type="text/html"/>
    <title>Perlbrew Release 0.24</title>
    <updated>2011-06-08T07:34:34+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The 0.24 release is a small maintenence release</p>

<ul>
<li>Fix <a href="https://github.com/gugod/App-perlbrew/issues/92">Github Issue #92</a></li>
<li>Fix <a href="https://github.com/gugod/App-perlbrew/issues/82">Github Issue #82</a></li>
<li>Add tests for various commands</li>
</ul>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.23.html" type="text/html"/>
    <title>Perlbrew Release 0.23</title>
    <updated>2011-05-31T21:28:53+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The 0.23 release features these minor rchanges:</p>

<ul>
<li>Fix dependency and tests in 0.22 release tarball.</li>
<li>pdksh support for OpenBSD</li>
<li>fix auto-detection of curl</li>
<li>Introduce a <code>PERLBREW_HOME</code> env var, default to <code>~/.perlbrew</code>. User may set it to store personal setting to somewher else.</li>
</ul>

<p>It is a relatively smaller release merely to fix cpan tests.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/Release-0.22.html" type="text/html"/>
    <title>Perlbrew Release 0.22</title>
    <updated>2011-05-27T01:20:26+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The 0.22 release features these major changes:</p>

<ul>
<li>Fix ccache support on Linux
<ul>
<li>To compile perl with ccache, <code>perlbrew install -Dcc=ccache\ gcc' -Dld=gcc perl-5.14.0</code></li>
</ul></li>
<li>Better installation management
<ul>
<li>Fix: <code>install</code> command no longer clobber existing installations.</li>
<li>New command: uninstall</li>
<li>New command: alias</li>
</ul></li>
<li>New command: self-upgrade</li>
</ul>

<h2>Better Installation Management</h2>

<p>The <code>install</code> command used to clobber existing perl installations without noticing users, now it does not. perlbrew simply stops the installation process when it detects any naming collision. If it is intended to reinstall with the exact same name, you need to explicitly uninstall the old one first.</p>

<p>Yes, finally the <code>uninstall</code> command is here, to remove the specified perl installation.</p>

<pre><code>perlbrew uninstall perl-5.10.1
</code></pre>

<p>Also a mechanism to make aliases is introduced. Which provides a better non-interactive usage.</p>

<p>Let's say you have both perl-5.12.3 and perl-5.14.0 installed, and want to migrate all your programs to use perl-5.14.0 eventually. Previously, you need to put the exact path to perl-5.12.3 in the shebang, like:</p>

<pre><code>#!/Users/gugod/perl5/perlbrew/perls/perl-5.12.3/bin/perl
</code></pre>

<p>To migrate your programs to perl-5.14.0, you need to replace that line to</p>

<pre><code>#!/Users/gugod/perl5/perlbrew/perls/perl-5.14.0/bin/perl
</code></pre>

<p>Which might not be a big issue, until you have to do that for tens, or hundreds of programs.</p>

<p>The solution to this scenario, is to use alias. First create an alias for perl-5.12.3, here the name of choice is "stable":</p>

<pre><code>perlbrew alias create perl-5.12.3 stable
</code></pre>

<p>And the shebang for the "stable" perl is just:</p>

<pre><code>#!/Users/gugod/perl5/perlbrew/perls/stable/bin/perl
</code></pre>

<p>Under the hood it is just a symlink that does the trick. Once you need to fullly migrate to perl-5.14.0, just upgrade the symlink with:</p>

<pre><code>perlbrew alias delete stable
perlbrew alias create perl-5.14.0 stable
</code></pre>

<p>Or alternatively, do a force create to override the existing alias</p>

<pre><code>perlbrew alias -f create perl-5.14.0 stable
</code></pre>

<p>No need to change shebang of programs anymore.</p>

<p>perlbrew used to have a special symlink named <code>current</code> to keep what's the default perl for users. This <code>current</code> symlink is no longer special. You may still create an alias named "current" if you need to.</p>

<h2>New command: self-upgrade</h2>

<p>A <code>self-upgrade</code> command is also introduced for easier upgrading. It essentially just run this line:</p>

<pre><code>curl -L http://xrl.us/perlbrewinstall | bash
</code></pre>

<p>However, if the perlbrew executable is installed with CPAN, this command does not do anything at all, but just showing a message telling that it cannot be auto-upgraded. If your perlbrew is installed with CPAN, you need to upgrade it with CPAN.</p>
</div>
    </content>
  </entry>
  <entry>
    <link rel="alternate" href="http://perlbrew.pl/CommandAlias.html" type="text/html"/>
    <title>Description</title>
    <updated>2011-05-27T00:21:52+08:00</updated>
    <author>
      <name>gugod</name>
    </author>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Since 0.21, the <code>current</code> symlink is ditched in favor of bash-based multi-user support. However, the change discourage non-interactive uses of perlbrew because people will have to put the versioned path in shebang, which makes it troublesome when it is time to switch to different perl for those program.</p>

<p>An 'alias' command is introduced to generalize the need. <code>current</code> symlink is no longer a special one, but just a name specified by users.</p>

<h2>Usage</h2>

<pre><code>perlbrew alias [-f] &lt;action&gt; &lt;name&gt; [&lt;alias&gt;]
</code></pre>

<p>Action is one of: create, delete, rename</p>

<p><code>-f</code> flag is used to forcibly perform the action.</p>

<p><code>&lt;name&gt;</code> should be one of the installation names, <code>&lt;alias&gt;</code> is the given alternative name.</p>

<h2>Synopsis</h2>

<pre><code># essentially ln -s perl-5.14.0 current.
#     should fail if 'perl-5.14.0' does not exist.
#     should fail if 'current' already exists.
perlbrew alias create perl-5.14.0 current

# delete the alias
perlbrew alias delete current

# renaming
#     should fail if `current` does not exist.
#     should fail if `main` already exists.
perlbrew alias rename current main

# -f for force override
#    should still fail if the alias refers to a non-alias installation.
#    should still fail if the name does not exists (`perl-5.14.0` and `current` in the following cases)
perlbrew alias -f create perl-5.14.0 current
perlbrew alias -f rename current main
</code></pre>
</div>
    </content>
  </entry>
</feed>
